/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Paquete;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;


/**
 *
 * @author i12luqud
 */
public class Novedades extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Novedades() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(1, 1, 1));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));

        jPanel4.setBackground(new java.awt.Color(255, 102, 0));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/home20x20.png"))); // NOI18N
        jLabel20.setText("Inicio");
        jLabel20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel20MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel20MouseExited(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/novedad20x20.png"))); // NOI18N
        jLabel21.setText("Novedades");
        jLabel21.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/peliculas20x20.png"))); // NOI18N
        jLabel4.setText("Pel√≠culas");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel4MouseExited(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/series20x20.png"))); // NOI18N
        jLabel5.setText("Series");
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator3)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel21)
                            .addComponent(jLabel5))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel20)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel20)
                .addGap(34, 34, 34)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(333, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 140, 576);

        jPanel2.setBackground(new java.awt.Color(255, 102, 0));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/busqueda20x20.png"))); // NOI18N
        jLabel2.setText("Buscar");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel2MouseExited(evt);
            }
        });

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/user.png"))); // NOI18N
        jLabel22.setText("Usuario");
        jLabel22.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/help20x20.png"))); // NOI18N
        jLabel23.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 773, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addGap(40, 40, 40)
                .addComponent(jLabel23)
                .addGap(31, 31, 31))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel22)))
                .addGap(20, 20, 20))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(138, 0, 1024, 60);

        jPanel3.setBackground(new java.awt.Color(1, 1, 1));

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setText("Nuevas Series");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Shield.jpg"))); // NOI18N
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Resurrection.jpg"))); // NOI18N
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Homeland.jpg"))); // NOI18N
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/HOC.jpg"))); // NOI18N
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/hannibal.jpg"))); // NOI18N
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/BE.jpg"))); // NOI18N
        jLabel11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(254, 254, 254));
        jLabel12.setText("Nuevas Pel√≠culas");

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Brick_Mansion.jpg"))); // NOI18N
        jLabel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capitan_America.jpg"))); // NOI18N
        jLabel15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Divergent.jpg"))); // NOI18N
        jLabel16.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
        });

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Heaven_is_for_real.jpg"))); // NOI18N
        jLabel17.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Pompeya.jpg"))); // NOI18N
        jLabel18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Rio2.jpg"))); // NOI18N
        jLabel19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(60, 60, 60)
                                .addComponent(jLabel7))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel12)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(60, 60, 60)
                                        .addComponent(jLabel15)))))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel16))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel17))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel18))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel11))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel13))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel15)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))))
                .addContainerGap(99, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(140, 60, 1030, 540);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        // Esta pelicula es Brick Mansions
        PeliculaFinal pelicula = new PeliculaFinal();
        pelicula.setSize(1160, 570);
        pelicula.setResizable(false);
        pelicula.setDefaultCloseOperation(pelicula.DO_NOTHING_ON_CLOSE);
        
        pelicula.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        pelicula.setLocationRelativeTo(null);
       
        pelicula.nombrePelicula("Brick Mansions");
        pelicula.setTitle("Brick Mansions");
        pelicula.directorPelicula("<html><body>Director: Camille Delamarre</html></body>");
        pelicula.valoracion("Nota: 7.6 - Notable");
        pelicula.sinopsis("<html><body>En un Detroit dist√≥pico, las antiguas mansiones de ladrillo ahora dan cobijo a algunos de los delincuentes m√°s peligrosos de la ciudad. En un intento desesperado por proteger el resto de la ciudad, la polic√≠a construye, alrededor de esas mansiones, un muro de contenci√≥n. Mientras el agente secreto Damian Coller (Paul Walker) libra una dura batalla contra la corrupci√≥n; Lino (David Belle), un ex-convicto, lucha por llevar una vida honesta. Sus caminos nunca deber√≠an haberse cruzado, pero cuando el capo de la droga, Tremain (RZA), secuestra a la novia de Lino, Damian se ve obligado a aceptar su ayuda para intentar detener una siniestra trama que pretende acabar con toda la ciudad... Remake de Distrito 13</html></body>");
        pelicula.icono("/iconos/Brick_Mansion.jpg");
                
        this.setVisible(false);
        pelicula.setVisible(true);
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
        // Esta pelicula es Divergente
        PeliculaFinal pelicula = new PeliculaFinal();
        pelicula.setSize(1160, 570);
        pelicula.setResizable(false);
        pelicula.setDefaultCloseOperation(pelicula.DO_NOTHING_ON_CLOSE);
        
        pelicula.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        pelicula.setLocationRelativeTo(null);
       
        pelicula.nombrePelicula("Divergente");
        pelicula.setTitle("Divergente");
        pelicula.directorPelicula("<html><body>Director: Neil Burger</html></body>");
        pelicula.valoracion("Nota: 8.0 - Notable");
        pelicula.sinopsis("<html><body>Ambientada en un mundo dist√≥pico que se divide en cinco categor√≠as: Verdad, Abnegaci√≥n, Osad√≠a, Cordialidad y Erudici√≥n. Todos los miembros de esta sociedad tienen que elegir, a los 16 a√±os, a qu√© bando creen pertenecer, atendiendo a sus virtudes personales m√°s destacadas. En este dilema se encuentra la protagonista, Beatrice, que sorprende a todos sus allegados y amigos con la decisi√≥n que toma. Beatrice, que pasa a llamarse m√°s tarde Tris Prior, tiene que buscar su lugar adecuado, pero ella no es como el resto. Guarda un secreto que podr√≠a ser definitivo para mantener el orden social descrito y tambi√©n para salvar su propia vida...</html></body>");
        pelicula.icono("/iconos/Divergent.jpg");
                
        this.setVisible(false);
        pelicula.setVisible(true);
    }//GEN-LAST:event_jLabel16MouseClicked

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        // Esta pelicula es El cielo es real
        PeliculaFinal pelicula = new PeliculaFinal();
        pelicula.setSize(1160, 570);
        pelicula.setResizable(false); 
        pelicula.setDefaultCloseOperation(pelicula.DO_NOTHING_ON_CLOSE);
        
        pelicula.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        pelicula.setLocationRelativeTo(null);

        pelicula.nombrePelicula("El cielo es real");
        pelicula.setTitle("El cielo es real");
        pelicula.directorPelicula("<html><body>Director: Randall Wallace</html></body>");
        pelicula.valoracion("Nota: 6.7 - Bien");
        pelicula.sinopsis("<html><body>El actor nominado al Oscar¬Æ y ganador del Emmy¬Æ Greg Kinnear (Mejor‚Ä¶ imposible, Peque√±a Miss Sunshine) encarna a Todd Burpo, un peque√±o empresario, bombero voluntario, pastor, y padre de familia que intenta llegar a fin de mes en lo que ha sido un a√±o duro. Tras tener que someterse Colton (el reci√©n llegado Connor Corum en su debut cinematogr√°fico), el inteligente hijo menor de la familia, a una cirug√≠a de emergencia en el hospital, sus padres, Todd y Sonja (Kelly Reilly, El vuelo, Sherlock Holmes) est√°n locos de contentos por el milagro de su recuperaci√≥n. Pero no est√°n preparados para lo que ocurre a continuaci√≥n -- Colton empieza a hablarles con total naturalidad y seguridad sobre su asombroso viaje de ida y vuelta al cielo. Cuando Colton inocentemente le cuenta a sus padres detalles de cosas que es imposible que pueda saber, Todd se topa con un muro de misterios y dudas hasta que lo derrumba y halla esperanza, el asombro, y la fuerza del prop√≥sito.</html></body>");
        pelicula.icono("/iconos/Heaven_is_for_real.jpg");
                
        this.setVisible(false);
        pelicula.setVisible(true);
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        // Esta pelicula es Pompeya
        PeliculaFinal pelicula = new PeliculaFinal();
        pelicula.setSize(1160, 570);
        pelicula.setResizable(false);
        pelicula.setDefaultCloseOperation(pelicula.DO_NOTHING_ON_CLOSE);
        
        pelicula.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        pelicula.setLocationRelativeTo(null);
       
        
        pelicula.nombrePelicula("Pompeya");
        pelicula.setTitle("Pompeya");
        pelicula.directorPelicula("<html><body>Director: Paul W.S. Anderson</html></body>");
        pelicula.valoracion("Nota: 6.5 - Bien");
        pelicula.sinopsis("<html><body>Pompeya, a√±o 79 d.C. Milo (Kit Harington), un esclavo convertido en gladiador, ve c√≥mo a su amor, la joven Cassia (Emily Browning), la obligan a prometerse con Corvus (Kiefer Sutherland), un corrupto senador. Cuando el Vesubio entra en erupci√≥n amenazando con destruirlo todo, Milo intentar√° salvarla... mientras todo se derrumba.</html></body>");
        pelicula.icono("/iconos/Pompeya.jpg");
                
        this.setVisible(false);
        pelicula.setVisible(true);
    }//GEN-LAST:event_jLabel18MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        // Esta pelicula es Rio 2
        PeliculaFinal pelicula = new PeliculaFinal();
        pelicula.setSize(1160, 570);
        pelicula.setResizable(false);
        pelicula.setDefaultCloseOperation(pelicula.DO_NOTHING_ON_CLOSE);
        
        pelicula.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        pelicula.setLocationRelativeTo(null);
       
        pelicula.nombrePelicula("Rio 2");
        pelicula.setTitle("Rio 2");
        pelicula.directorPelicula("<html><body>Director: Carlos Saldanha</html></body>");
        pelicula.valoracion("Nota: 7.6 - Notable");
        pelicula.sinopsis("<html><body>Blu, Perla y sus tres hijos est√°n viviendo lo que parece ser la vida perfecta en la ciudad m√°gica que le da nombre. Sin embargo Perla piensa que los ni√±os tienen que aprender a vivir como p√°jaros de verdad, como p√°jaros salvajes, por lo que la familia se ver√° obligada a trasladarse al Amazonas donde Blu, aparte de tener que adaptarse a sus nuevos vecinos, tendr√° que lidiar con el miedo por perder a su familia ante la llamada de la madre naturaleza.</html></body>");
        pelicula.icono("/iconos/Rio2.jpg");
                
        this.setVisible(false);
        pelicula.setVisible(true);
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        // A inicio
        Principal ventana = new Principal();
        ventana.setSize(1160, 570);
        ventana.setResizable(false);
        ventana.setTitle("Principal");
        ventana.setDefaultCloseOperation(ventana.DO_NOTHING_ON_CLOSE);
        
        ventana.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        ventana.setLocationRelativeTo(null);
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        //ESTE LLEVA A PELICULAS
        Peliculas ventana = new Peliculas();
        ventana.setSize(1160, 570);
        ventana.setResizable(false);
        ventana.setTitle("Peliculas");
        ventana.setDefaultCloseOperation(ventana.DO_NOTHING_ON_CLOSE);
        
        ventana.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        ventana.setLocationRelativeTo(null);
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        //ESTE LLEVA A SERIES
        Series ventana = new Series();
        ventana.setSize(1160, 570);
        ventana.setResizable(false);
        ventana.setTitle("Series");
        ventana.setDefaultCloseOperation(ventana.DO_NOTHING_ON_CLOSE);
        
        ventana.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        ventana.setLocationRelativeTo(null);
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        // Esta pelicula es Capitan America: El soldado de Invierno
        PeliculaFinal pelicula = new PeliculaFinal();
        pelicula.setSize(1160, 570);
        pelicula.setResizable(false);
        pelicula.setDefaultCloseOperation(pelicula.DO_NOTHING_ON_CLOSE);
        
        pelicula.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        pelicula.setLocationRelativeTo(null);
       
        pelicula.nombrePelicula("Capitan America: El soldado de Invierno");
        pelicula.setTitle("Capitan America: El soldado de Invierno");
        pelicula.directorPelicula("<html><body>Directores: Anthony Russo, Joe Russo</html></body>");
        pelicula.valoracion("Nota: 7.9 - Notable");
        pelicula.sinopsis("<html><body>Tras los devastadores acontecimientos acaecidos en Nueva York con Los Vengadores, ‚ÄúCapit√°n Am√©rica. El Soldado de Invierno‚Äù de Marvel nos cuenta c√≥mo Steve Rogers, alias el Capit√°n Am√©rica, vive tranquilamente en Washington, D.C. intentando adaptarse al mundo moderno. Pero cuando atacan a un colega de S.H.I.E.L.D., Steve se ve envuelto en una trama de intrigas que amenaza con poner en peligro al mundo. El Capit√°n Am√©rica une fuerzas con la Viuda Negra y lucha por sacar a la luz una conspiraci√≥n cada vez mayor mientras hace frente a asesinos profesionales enviados para silenciarle. Cuando por fin se revela la magnitud de la malvada trama, el Capit√°n Am√©rica y la Viuda Negra van a contar con la ayuda de un nuevo aliado, el Halc√≥n. Pero deber√°n enfrentarse a un enemigo inesperado y extraordinario: el Soldado de Invierno.</html></body>");
        pelicula.icono("/iconos/Capitan_America.jpg");
                
        this.setVisible(false);
        pelicula.setVisible(true);
    }//GEN-LAST:event_jLabel15MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // Esta pelicula es Agents of S.H.I.E.L.D
        SerieFinal serie = new SerieFinal();
        serie.setSize(1160, 570);
        serie.setResizable(false);
        serie.setDefaultCloseOperation(serie.DO_NOTHING_ON_CLOSE);
        
        serie.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        serie.setLocationRelativeTo(null);
       
        serie.nombreSerie("Agents of S.H.I.E.L.D");
        serie.setTitle("Agents of S.H.I.E.L.D");
        serie.directorSerie("<html><body>Director: Joss Whedon</html></body>");
        serie.valoracion("Nota: 7.8 - Notable");
        serie.sinopsis("<html><body>El agente Phil Coulson reune a un peque√±o grupo de agentes de S.H.I.E.L.D. para investigar nuevos casos extra√±os. Cada caso pondr√° a prueba al equipo, su cooperaci√≥n y logros individuales, tratando de descubrir a nuevos superh√©roes alrededor del mundo para frenarles si as√≠ fuera necesario. Spin-off de la pel√≠cula \"Los Vengadores\", que de inicio justo al final de √©sta.</html></body>");
        serie.icono("/iconos/Shield.jpg");
                
        this.setVisible(false);
        serie.setVisible(true);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // Esta pelicula es Resurrection (The Returned)
        SerieFinal serie = new SerieFinal();
        serie.setSize(1160, 570);
        serie.setResizable(false);
        serie.setDefaultCloseOperation(serie.DO_NOTHING_ON_CLOSE);
        
        serie.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        serie.setLocationRelativeTo(null);
       
        serie.nombreSerie("Resurrection (The Returned)");
        serie.setTitle("Resurrection (The Returned)");
        serie.directorSerie("<html><body>Director: Charles McDougall</html></body>");
        serie.valoracion("Nota: 8.2 - Notable");
        serie.sinopsis("<html><body>'Resurrection' es un drama americano, adaptaci√≥n de la novela de Jason Mott 'The Returned', centrada en los habitantes de Arcadia (Estados Unidos) cuyas vidas cambian de forma repentina cuando sus seres queridos, ya fallecidos, regresan a la vida.Jacob, un ni√±o de 8 a√±os, se despierta solo en una zona rural de china sin saber c√≥mo lleg√≥ hasta all√≠. Jacob (Landon Gimenez) comienza a hacer memoria y recuerda que no es en China donde naci√≥, sino que √©l es de Arcadia. Es entonces cuando Martin Bellamy (Omar Epps, House), un agente de inmigraci√≥n, le lleva a su ciudad natal.Cuando llega a la que era su casa de peque√±o, se encuentra con que est√° ocupada por una pareja de ancianos a los que reconoce inmediatamente como sus padres. √âstos perdieron a su hijo Jacob hace m√°s de 30 a√±os atr√°s. Cuando se reencuentran comienzan a formar las piezas del puzle, para desentra√±ar este misterio, con la ayuda del sheriff cuya esposa falleci√≥ tambi√©n el mismo d√≠a que Jacob cuando trataba de salvar la vida del peque√±o.</html></body>");
        serie.icono("/iconos/Resurrection.jpg");
                
        this.setVisible(false);
        serie.setVisible(true);
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // Esta pelicula es Homeland
        SerieFinal serie = new SerieFinal();
        serie.setSize(1160, 570);
        serie.setResizable(false);
        serie.setDefaultCloseOperation(serie.DO_NOTHING_ON_CLOSE);
        
        serie.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        serie.setLocationRelativeTo(null);
        
        serie.nombreSerie("Homeland");
        serie.setTitle("Homeland");
        serie.directorSerie("<html><body>Directores: Michael Cuesta, Daniel Attias, Guy Ferland, Clark Johnson, Jeffrey Nachmanoff</html></body>");
        serie.valoracion("Nota: 8.6 - Notable");
        serie.sinopsis("<html><body>El sargento de la Marina Nicholas Brody regresa a casa ocho a√±os despu√©s de su desaparici√≥n en Irak. Tras esos ocho a√±os encerrado y torturado en paradero desconocido, un comando de las fuerzas especiales le localiz√≥ de casualidad durante una misi√≥n, pues hac√≠a tiempo que se hab√≠a dado a Brody por muerto. Pero la joven Carrie Mathison, una impulsiva agente de la CIA, sospecha que Brody se ha pasado al enemigo durante su cautiverio, pues meses atr√°s un terrorista condenado a muerte le confes√≥ que un soldado norteamericano se hab√≠a \"pasado al otro bando\".Serie basada en la original israel√≠ \"Hatufim\"/\"Prisoners of War\" creada por Gideon Raff.</html></body>");
        serie.icono("/iconos/Homeland.jpg");
                
        this.setVisible(false);
        serie.setVisible(true);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        // Esta pelicula es House of Cards
        SerieFinal serie = new SerieFinal();
        serie.setSize(1160, 570);
        serie.setResizable(false);
        serie.setDefaultCloseOperation(serie.DO_NOTHING_ON_CLOSE);
        
        serie.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        serie.setLocationRelativeTo(null);
       
        serie.nombreSerie("House of Cards");
        serie.setTitle("House of Cards");
        serie.directorSerie("<html><body>Director: David Fincher</html></body>");
        serie.valoracion("Nota: 8.8 - Notable");
        serie.sinopsis("<html><body>El implacable y manipulador congresista Francis Underwood (Kevin Spacey), con la complicidad de su fr√≠a mujer Claire (Robin Wright), maneja con incre√≠ble destreza los hilos de poder en Washington. Su retorcido juego pol√≠tico, en el que ans√≠a la secretar√≠a de Estado del nuevo gobierno electo, se desarrolla en el tenebroso mundo de la codicia, el sexo y la corrupci√≥n del D.C. contempor√°neo. Frank sabe que los medios de comunicaci√≥n son vitales para conseguir sus objetivos, por lo que decide convertirse en la \"garganta profunda\" de la joven y ambiciosa periodista Zoe Barnes (Kate Mara), ofreci√©ndole exclusivas que desestabilicen e incluso hundan a sus adversarios pol√≠ticos... Nueva adaptaci√≥n de la novela hom√≥nima de Michael Dobbs, en la que se bas√≥ una miniserie brit√°nica de 1990.</html></body>");
        serie.icono("/iconos/HOC.jpg");
                
        this.setVisible(false);
        serie.setVisible(true);
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        // Esta pelicula es Hannibal
        SerieFinal serie = new SerieFinal();
        serie.setSize(1160, 570);
        serie.setResizable(false);
        serie.setDefaultCloseOperation(serie.DO_NOTHING_ON_CLOSE);
        
        serie.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        serie.setLocationRelativeTo(null);
       
        serie.nombreSerie("Hannibal");
        serie.setTitle("Hannibal");
        serie.directorSerie("<html><body>Director: James Foley</html></body>");
        serie.valoracion("Nota: 8.6 - Notable");
        serie.sinopsis("<html><body>Hannibal esta escrita y producida por Bryan Fuller (Pushing Daisies), cuya idea es centrar la trama de la serie en la relaci√≥n entre el agente de polic√≠a Will Graham, interpretado por Dancy (The Big C, La Marca Del Lobo, Martha Marcy May Marlene) y el despiadado Hannibal Lecter.</html></body>");
        serie.icono("/iconos/hannibal.jpg");
                
        this.setVisible(false);
        serie.setVisible(true);
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        // Esta pelicula es Boardwalk Empire
        SerieFinal serie = new SerieFinal();
        serie.setSize(1160, 570);
        serie.setResizable(false);
        serie.setDefaultCloseOperation(serie.DO_NOTHING_ON_CLOSE);
        
        serie.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        serie.setLocationRelativeTo(null);
       
        serie.nombreSerie("Boardwalk Empire");
        serie.setTitle("Boardwalk Empire");
        serie.directorSerie("<html><body>Directores: Timothy Van Patten, Allen Coulter, Jeremy Podeswa, Brad Anderson</html></body>");
        serie.valoracion("Nota: 8.7 - Notable");
        serie.sinopsis("<html><body>Boardwalk Empire es un drama de √©poca centrado en Enoch \"Nucky\" Thompson (personaje basado en Enoch \"Nucky\" Johnson, influyente pol√≠tico de tal ciudad entre 1911 y 1941),3 una prominente figura pol√≠tica que controla Atlantic City, New Jersey durante el per√≠odo de la ley seca desde 1920 hasta 1930. Nucky interact√∫a con varias figuras hist√≥ricas en su vida personal y pol√≠tica, incluyendo g√°ngsters, pol√≠ticos, agentes del gobierno, etc. El gobierno adem√°s se interesa en el contrabando y otras actividades ilegales de esa zona, mandando agentes para investigar posibles conexiones con la mafia pero tambi√©n para observar el lujoso y costoso estilo de vida de Nucky, figura pol√≠tica del condado. Como el Enoch L. Johnson real, el Nucky de la serie es el segundo de tres jefes que condujeron el poder republicano y usaron el chantaje y el poder pol√≠tico para controlar Atlantic City. Sin embargo, Terence Winter declar√≥ que el libro de Nelson Johnson \"fue en realidad solo un punto de partida\".</html></body>");
        serie.icono("/iconos/BE.jpg");
                
        this.setVisible(false);
        serie.setVisible(true);
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        //Esto abre el panel de buscar
        Buscar buscador = new Buscar();
        buscador.setSize(511, 107);
        buscador.setTitle("Buscar");
        buscador.setResizable(false);
        buscador.setDefaultCloseOperation(buscador.HIDE_ON_CLOSE);
        buscador.setLocationRelativeTo(null);
        buscador.setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        jLabel4.setForeground(Color.white);
    }//GEN-LAST:event_jLabel4MouseEntered

    private void jLabel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseExited
       jLabel4.setForeground(Color.black);
    }//GEN-LAST:event_jLabel4MouseExited

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        jLabel5.setForeground(Color.white);
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseExited
        jLabel5.setForeground(Color.black);
    }//GEN-LAST:event_jLabel5MouseExited

    private void jLabel20MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseEntered
        jLabel20.setForeground(Color.white);
    }//GEN-LAST:event_jLabel20MouseEntered

    private void jLabel20MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseExited
        jLabel20.setForeground(Color.black);
    }//GEN-LAST:event_jLabel20MouseExited

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseEntered
        jLabel2.setForeground(Color.white);
    }//GEN-LAST:event_jLabel2MouseEntered

    private void jLabel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseExited
        jLabel2.setForeground(Color.black);
    }//GEN-LAST:event_jLabel2MouseExited

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
        // Abrimos el panel de usuario
        Usuario usuario = new Usuario();
        usuario.setSize(500, 300);
        usuario.setDefaultCloseOperation(usuario.HIDE_ON_CLOSE);
        usuario.setLocationRelativeTo(null);
        usuario.setVisible(true);
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
        //Este es el menu de ayuda del principal
        JOptionPane panel = new JOptionPane();
        
        Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));

        panel.showMessageDialog(panel, "<html><body>Este es el menu de novedades\n"
            + "Aqu√≠ se muestran las √∫ltimas incorporaciones de series o pel√≠culas\n"
            + "Para abrir cualquiera de ellas solo debes pulsar en el icono correspondiente", "Ayuda", WIDTH, UCO);
    }//GEN-LAST:event_jLabel23MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Novedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Novedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Novedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Novedades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}

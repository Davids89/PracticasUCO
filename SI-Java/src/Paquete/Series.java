/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Paquete;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author i12luqud
 */
public class Series extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Series() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(1, 1, 1));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/home20x20.png"))); // NOI18N
        jLabel1.setText("Inicio");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
        });

        jLabel38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/novedad20x20.png"))); // NOI18N
        jLabel38.setText("Novedades");
        jLabel38.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel38.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel38MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel38MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel38MouseExited(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/peliculas20x20.png"))); // NOI18N
        jLabel4.setText("Pel√≠culas");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel4MouseExited(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/series20x20.png"))); // NOI18N
        jLabel5.setText("Series");
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel38)
                            .addComponent(jLabel5))
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(330, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 140, 576);

        jPanel2.setBackground(new java.awt.Color(255, 102, 0));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/busqueda20x20.png"))); // NOI18N
        jLabel2.setText("Buscar");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel2MouseExited(evt);
            }
        });

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/user.png"))); // NOI18N
        jLabel25.setText("Usuario");
        jLabel25.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel25MouseClicked(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/help20x20.png"))); // NOI18N
        jLabel20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 773, Short.MAX_VALUE)
                .addComponent(jLabel25)
                .addGap(40, 40, 40)
                .addComponent(jLabel20)
                .addGap(31, 31, 31))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel25)))
                .addGap(20, 20, 20))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(138, 0, 1024, 60);

        jPanel4.setBackground(new java.awt.Color(1, 1, 1));
        jPanel4.setPreferredSize(new java.awt.Dimension(580, 679));

        jLabel21.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(254, 254, 254));
        jLabel21.setText("Acci√≥n");
        jLabel21.setToolTipText("");

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Dexter.jpg"))); // NOI18N
        jLabel22.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/HOC.jpg"))); // NOI18N
        jLabel23.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tronosPeque√±a.jpg"))); // NOI18N
        jLabel24.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel24MouseClicked(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(254, 254, 254));
        jLabel26.setText("Humor");

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/TBBT.jpg"))); // NOI18N
        jLabel27.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel27MouseClicked(evt);
            }
        });

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/HIMYM.jpg"))); // NOI18N
        jLabel28.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel28MouseClicked(evt);
            }
        });

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Modern_Family.jpg"))); // NOI18N
        jLabel29.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel29MouseClicked(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(254, 254, 254));
        jLabel30.setText("Animaci√≥n");

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/AT.jpg"))); // NOI18N
        jLabel31.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel31MouseClicked(evt);
            }
        });

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Futurama.jpg"))); // NOI18N
        jLabel32.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel32.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel32MouseClicked(evt);
            }
        });

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Los_Simpsons.jpg"))); // NOI18N
        jLabel33.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel33MouseClicked(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(254, 254, 254));
        jLabel34.setText("Aventura");

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Neverland.jpg"))); // NOI18N
        jLabel35.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel35.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel35MouseClicked(evt);
            }
        });

        jLabel36.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/OnceUponATIme.jpg"))); // NOI18N
        jLabel36.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel36.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel36MouseClicked(evt);
            }
        });

        jLabel37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/SmallVille.jpg"))); // NOI18N
        jLabel37.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel37.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel37MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel31))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel32))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33)
                            .addComponent(jLabel24)))
                    .addComponent(jLabel30))
                .addGap(80, 80, 80)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27)
                            .addComponent(jLabel35)
                            .addComponent(jLabel26))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jLabel36))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel37)
                            .addComponent(jLabel29))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel26))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28))
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jLabel34))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(jLabel36)
                    .addComponent(jLabel37)
                    .addComponent(jLabel35))
                .addContainerGap(223, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(140, 59, 1030, 670);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // A inicio
        Principal ventana = new Principal();
        ventana.setSize(1160, 570);
        ventana.setResizable(false);
        ventana.setTitle("Principal");
        ventana.setDefaultCloseOperation(ventana.DO_NOTHING_ON_CLOSE);
        
        ventana.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        ventana.setLocationRelativeTo(null);
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
        // Este es para Dexter
        SerieFinal dexter = new SerieFinal();
        dexter.setSize(1160, 570);
        dexter.setResizable(false);
        dexter.setDefaultCloseOperation(dexter.DO_NOTHING_ON_CLOSE);
        
        dexter.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        dexter.setLocationRelativeTo(null);
        
        dexter.nombreSerie("Dexter");
        dexter.setTitle("Dexter");
        dexter.directorSerie("<html><body>Directores: John Dahl, Steve Shill, Keith Gordon, Marcos Siega, Ernest R. Dickerson, Romeo Tirone, Michael Cuesta, Tony Goldwyn, S.J. Clarkson, Stefan Schwartz</body></html>");
        dexter.valoracion("Nota: 9.0 - Sobresaliente");
        dexter.sinopsis("<html><body>Dexter Morgan es un hombre extra√±o. Cuando era ni√±o (Michael C. Hall), fue maltratado y abandonado por sus padres. Ahora es un importante forense patol√≥gico, pero bajo su carism√°tica personalidad, se esconde un terrible secreto: da rienda suelta a sus tendencias homicidas buscando, atrapando y asesinando brutalmente a despiadados criminales que han conseguido escapar a la acci√≥n de la justicia. Basada en una novela de Jeff Lindsay: Darkly Dreaming Dexter </body></html>");
        dexter.icono("/iconos/Dexter.jpg");
        
        this.setVisible(false);
        dexter.setVisible(true);
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
        //Este es para House of Cards
        SerieFinal HoC = new SerieFinal();
        HoC.setSize(1160, 570);
        HoC.setResizable(false);
        HoC.setDefaultCloseOperation(HoC.DO_NOTHING_ON_CLOSE);
        
        HoC.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        HoC.setLocationRelativeTo(null);
        
        HoC.nombreSerie("House of Cards");
        HoC.setTitle("House of Cards");
        HoC.directorSerie("<html><body>Director: David Fincher</html></body>");
        HoC.valoracion("Nota: 8.8 - Sobresaliente");
        HoC.sinopsis("<html><body>El implacable y manipulador congresista Francis Underwood (Kevin Spacey), con la complicidad de su fr√≠a mujer Claire (Robin Wright), maneja con incre√≠ble destreza los hilos de poder en Washington. Su retorcido juego pol√≠tico, en el que ans√≠a la secretar√≠a de Estado del nuevo gobierno electo, se desarrolla en el tenebroso mundo de la codicia, el sexo y la corrupci√≥n del D.C. contempor√°neo. Frank sabe que los medios de comunicaci√≥n son vitales para conseguir sus objetivos, por lo que decide convertirse en la \"garganta profunda\" de la joven y ambiciosa periodista Zoe Barnes (Kate Mara), ofreci√©ndole exclusivas que desestabilicen e incluso hundan a sus adversarios pol√≠ticos... Nueva adaptaci√≥n de la novela hom√≥nima de Michael Dobbs, en la que se bas√≥ una miniserie brit√°nica de 1990.</body></html>");
        HoC.icono("/iconos/HOC.jpg");
        
        this.setVisible(false);
        HoC.setVisible(true);
    }//GEN-LAST:event_jLabel23MouseClicked

    private void jLabel24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel24MouseClicked
        //Este es para Juego de Tronos
        SerieFinal JdT = new SerieFinal();
        JdT.setSize(1160, 570);
        JdT.setResizable(false);
        JdT.setDefaultCloseOperation(JdT.DO_NOTHING_ON_CLOSE);
        
        JdT.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        JdT.setLocationRelativeTo(null);
        
        JdT.nombreSerie("Juego de Tronos");
        JdT.setTitle("Juego de Tronos");
        JdT.directorSerie("<html><body>Directores: Alan Taylor, Brian Kirk, Daniel Minahan, Timothy Van Patten, David Nutter, David Petrarca</html></body>");
        JdT.valoracion("Nota: 9.4 - Sobresaliente");
        JdT.sinopsis("<html><body>Adaptaci√≥n de la HBO de la famosa serie de novelas medievo-fant√°sticas, estando en producci√≥n inicialmente un episodio piloto y ampli√°ndose despu√©s a una primera temporada de 10 episodios. La historia de Canci√≥n de Hielo y Fuego se sit√∫a en un mundo ficticio medieval, principalmente en un continente llamado Poniente pero tambi√©n en un vasto continente oriental, conocido como Essos. La mayor parte de los personajes son humanos pero a medida que la serie avanza aparecen otras razas, tales como los fr√≠os y amenazadores Otros del Norte y los dragones del Este, ambos supuestamente extintos al principio de la saga. Hay tres l√≠neas argumentales en la serie: la cr√≥nica de la guerra civil din√°stica por el control de Poniente entre varias familias nobles; la creciente amenaza de los Otros, apenas contenida por un inmenso muro de hielo que protege el norte de Poniente; y el viaje de Daenerys Targaryen, la hija exiliada del rey que fue asesinado en otra guerra civil hace quince a√±os, quien busca regresar a Poniente a reclamar sus derechos. Estas tres historias interact√∫an entre s√≠ y son extremadamente co-dependientes.Libros de la saga:-Libro 1. Juego de tronos.-Libro 2. Choque de reyes.-Libro 3. Tormenta de espadas.-Libro 4. Festin de cuervos.-Libro 5. Danza de dragones.</body></html>");
        JdT.icono("/iconos/tronosPeque√±a.jpg");
        
        this.setVisible(false);
        JdT.setVisible(true);
    }//GEN-LAST:event_jLabel24MouseClicked

    private void jLabel27MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel27MouseClicked
        //Esta es para TBBT
        SerieFinal TBBT = new SerieFinal();
        TBBT.setSize(1160, 570);
        TBBT.setResizable(false);
        TBBT.setDefaultCloseOperation(TBBT.DO_NOTHING_ON_CLOSE);
        
        TBBT.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        TBBT.setLocationRelativeTo(null);
        
        TBBT.nombreSerie("The Big Bang Theory");
        TBBT.setTitle("The Big Bang Theory");
        TBBT.directorSerie("<html><body>Directores: Chuck Lorre Productions, Warner Bros. Television</html></body>");
        TBBT.valoracion("Nota: 9.2 - Sobresaliente");
        TBBT.sinopsis("<html><body>Leonard Hofstadter y Sheldon Cooper son dos f√≠sicos brillantes que trabajan en Cal Tech en Pasadena, California. Son colegas, mejores amigos y compa√±eros de piso. Tambi√©n est√°n el ingeniero mec√°nico Howard Wolowitz y el astrof√≠sico Rajesh Koothrappali, colegas y amigos de Cal Tech. El cuarteto gasta la mayor parte del tiempo trabajando en sus proyectos individuales, jugando videojuegos, viendo series y pel√≠culas de ciencia ficci√≥n o leyendo comics. Cuando Penny, una preciosa mujer y aspirante a actriz se traslada al apartamento de enfrente, Leonard tiene otra aspiraci√≥n en la vida, conseguir que Penny sea su novia.</body></html>");
        TBBT.icono("/iconos/TBBT.jpg");
        
        this.setVisible(false);
        TBBT.setVisible(true);
    }//GEN-LAST:event_jLabel27MouseClicked

    private void jLabel28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel28MouseClicked
        // Este es de Como Conoci a Vuestra Madre
        SerieFinal HIMYM = new SerieFinal();
        HIMYM.setSize(1160, 570);
        HIMYM.setResizable(false);
        HIMYM.setDefaultCloseOperation(HIMYM.DO_NOTHING_ON_CLOSE);
        
        HIMYM.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        HIMYM.setLocationRelativeTo(null);
        
        HIMYM.nombreSerie("C√≥mo Conoc√≠ a Vuestra Madre");
        HIMYM.setTitle("Como Conoc√≠ a Vuestra Madre");
        HIMYM.directorSerie("<html><body>Directores: Pamela Fryman, Rob Greenberg, Michael J. Shea</html></body>");
        HIMYM.valoracion("Nota: 9.0 - Sobresaliente");
        HIMYM.sinopsis("<html><body>How I Met Your Mother. Exitosa serie de la CBS que, en su primera temporada, obtuvo excelentes √≠ndices de audiencia adem√°s de ganar dos premios Emmy: uno a la direcci√≥n art√≠stica y otro a la fotograf√≠a. En el a√±o 2030, Ted (Josh Radnor) relata a sus dos hijos adolescentes c√≥mo conoci√≥ a su madre y c√≥mo fue su vida hasta que, por fin, encontr√≥ el amor verdadero. Todo empez√≥ cuando Marshall (Jason Segel), su mejor amigo, decidi√≥ casarse con Lily (Alyson Hannigan), su novia de toda la vida. Entonces Ted decidi√≥ lanzarse a la b√∫squeda del amor verdadero y formar una familia. Para conseguirlo cont√≥ con el apoyo de su amigo Barney (Neil Patrick Harris), un joven algo extravagante, adicto a los somn√≠feros y muy h√°bil para conocer mujeres. Cuando, por fin, Ted conoce a Robin (Cobie Smulders), una impresionante joven canadiense que acaba de mudarse a Nueva York, est√° completamente seguro de que es amor a primera vista, pero el destino a√∫n puede depararle muchas sorpresas.</body></html>");
        HIMYM.icono("/iconos/HIMYM.jpg");
        
        this.setVisible(false);
        HIMYM.setVisible(true);
    }//GEN-LAST:event_jLabel28MouseClicked

    private void jLabel29MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel29MouseClicked
        //Este es de Modern Family
        SerieFinal Modern_Family = new SerieFinal();
        Modern_Family.setSize(1160, 570);
        Modern_Family.setResizable(false);
        Modern_Family.setDefaultCloseOperation(Modern_Family.DO_NOTHING_ON_CLOSE);
        
        Modern_Family.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        Modern_Family.setLocationRelativeTo(null);
        
        Modern_Family.nombreSerie("Modern Family");
        Modern_Family.setTitle("Modern Family");
        Modern_Family.directorSerie("<html><body>Directores: Michael Spiller, Jason Winer, Chris Koch, Steven Levitan, Gail Mancuso, Scott Ellis, James R. Bagdonas, Reginald Hudlin Randall Einhorn, Fred Savage</body></html>");
        Modern_Family.valoracion("Nota: 9.0 - Sobresaliente");
        Modern_Family.sinopsis("<html><body>Una comedia con formato de falso documental que retrata a una t√≠pica (o at√≠pica, seg√∫n se mire) familia americana. Los protagonistas representan tres estructuras familiares muy diferentes: la convencional de padre-madre y tres hijos, la pareja homosexual que acaba de adoptar a un beb√© y el hombre maduro y rico casado con una mujer mucho m√°s joven ya con un hijo. A pesar de ser varios componentes todos son una sola familia en la que conoceremos sus vivencias.</body></html>");
        Modern_Family.icono("/iconos/Modern_Family.jpg");
        
        this.setVisible(false);
        Modern_Family.setVisible(true);
    }//GEN-LAST:event_jLabel29MouseClicked

    private void jLabel31MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel31MouseClicked
        //Este es para Hora de Aventuras
        SerieFinal AT = new SerieFinal();
        AT.setSize(1160, 570);
        AT.setResizable(false);
        AT.setDefaultCloseOperation(AT.DO_NOTHING_ON_CLOSE);
        
        AT.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        AT.setLocationRelativeTo(null);
        
        AT.nombreSerie("Hora de Aventuras");
        AT.setTitle("Hora de Aventuras");
        AT.directorSerie("<html><body>Director: Larry Leichliter</html></body>");
        AT.valoracion("Nota: 9.4 - Sobresaliente");
        AT.sinopsis("<html><body>Adventure Time, (\"Hora de Aventura\" Hispanoam√©rica y \"Hora de aventuras\" en Espa√±a) originalmente llamada \"Adventure Time with Finn and Jake\"es protagonizada por dos mejores amigos (y hermanos adoptivos): Finn, un ni√±o al que le encantan las aventuras, y Jake, un perro con poderes m√°gicos que habitan en la \"Tierra de Ooo\", un entorno lleno de personajes surrealistas y animales que hablan, donde la magia y la alta tecnolog√≠a se unen para crear extra√±os y nuevos artefactos y las aventuras se resumen en salvar princesas, luchar contra el mal, explorar lugares desconocidos y ayudar a los m√°s necesitados.</body></html>");
        AT.icono("/iconos/AT.jpg");
        
        this.setVisible(false);
        AT.setVisible(true);
    }//GEN-LAST:event_jLabel31MouseClicked

    private void jLabel32MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel32MouseClicked
        //Este es para Futurama
        SerieFinal Futurama = new SerieFinal();
        Futurama.setSize(1160, 570);
        Futurama.setResizable(false);
        Futurama.setDefaultCloseOperation(Futurama.DO_NOTHING_ON_CLOSE);
        
        Futurama.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        Futurama.setLocationRelativeTo(null);
        
        Futurama.nombreSerie("Futurama");
        Futurama.setTitle("Futurama");
        Futurama.directorSerie("<html><body>Directores: Rich Moore, Bret Haaland, Peter Avanzino, Gregg Vanzo, Ron Hughart, Brian Sheesley, Susie Dietter, Mark Ervin, Dwayne Carey-Hill, Chris Loudon</body></html>");
        Futurama.valoracion("Nota: 9.1 - Sobresaliente");
        Futurama.sinopsis("<html><body>La historia principal de Futurama se centra en el personaje de Philip J. Fry , un adolescente crecido t√≠pico del siglo XX, quien no sabe hacer muchas cosas bien , ni hacia donde se encamina su vida. Su trabajo de repartidor de pizzas, es el lugar donde todas sus frustraciones encuentran definici√≥n. Un accidente al llevar un pedido en donde funcionaban experimentos \"criog√©nicos\", deja congelado a Fry durante mil a√±os, logrando salir de ese estado, en el futuro, en una ciudad con culturas que comienza a desconocer, la tecnolog√≠a y el mundo ya son demasiado avanzadas para su entendimiento, su historia, familia y conocidos hab√≠an quedado atr√°s para siempre. Mediante una b√∫squeda en el directorio da con su t√°tara tatara sobrino nieto , que se trata de un anciano cient√≠fico, el Profesor Hubert Farnsworth, quien a su vez posee una empresa de reparto intergal√°ctico, en la cual Fry comienza a encontrar su nuevo hogar, junto a la gente que trabaja en dicha empresa Planet Express, junto a Leela, una mujer ciclope , de quien Fry se enamora a lo largo de los episodios, y Bender un robot con mala conducta, vicioso y poco confiable.</body></html>");
        Futurama.icono("/iconos/Futurama.jpg");
        
        this.setVisible(false);
        Futurama.setVisible(true);
    }//GEN-LAST:event_jLabel32MouseClicked

    private void jLabel33MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel33MouseClicked
        //Este es para Los Simpsons
        SerieFinal Simpsons = new SerieFinal();
        Simpsons.setSize(1160, 570);
        Simpsons.setResizable(false);
        Simpsons.setDefaultCloseOperation(Simpsons.DO_NOTHING_ON_CLOSE);
        
        Simpsons.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        Simpsons.setLocationRelativeTo(null);
        
        Simpsons.nombreSerie("Los Simpsons");
        Simpsons.setTitle("Los Simpsons");
        Simpsons.directorSerie("<html><body>Director: David Silverman</html></body>");
        Simpsons.valoracion("Nota: 9.4 - Sobresaliente");
        Simpsons.sinopsis("<html><body>Emitida por la Cadena Fox desde 1989, \"Los Simpson\" son ya todo un cl√°sico de la televisi√≥n mundial, una insuperable serie que narra las historias de una peculiar familia (Homer, Marge, Bart, Maggie y Lisa Simpson) y otros divertidos personajes de la singular localidad norteamericana de Springfield. Homer es el padre, un desastroso inspector de seguridad de la central nuclear. Marge es la madre, una ama de casa que soporta como puede todo lo que le rodea, que no es poco. Bart es un ni√±o de 10 a√±os que alegra su vida realizando travesuras de todo tipo. Lisa es la m√°s inteligente de la familia, que siempre busca hacerse un hueco en el mundo que le rodea, y la m√°s peque√±a, Maggie, un beb√© que todav√≠a no habla, pero que sin embargo da mucho que hablar. Toda una familia con una vida repleta de eventos y locuras.</body></html>");
        Simpsons.icono("/iconos/Los_Simpsons.jpg");
        
        this.setVisible(false);
        Simpsons.setVisible(true);
    }//GEN-LAST:event_jLabel33MouseClicked

    private void jLabel35MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel35MouseClicked
        //Este es para Neverland
        SerieFinal Neverland = new SerieFinal();
        Neverland.setSize(1160, 570);
        Neverland.setResizable(false);
        Neverland.setDefaultCloseOperation(Neverland.DO_NOTHING_ON_CLOSE);
        
        Neverland.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        Neverland.setLocationRelativeTo(null);
        
        Neverland.nombreSerie("Neverland");
        Neverland.setTitle("Neverland");
        Neverland.directorSerie("<html><body>Director: Nick Willing</html></body>");
        Neverland.valoracion("Nota: 7.7 - Notable");
        Neverland.sinopsis("<html><body>Neverland contar√° el origen de Peter Pan y su llegada a Nunca Jam√°s. Est√° dirigida y escrita por Nick Willing. La historia comienza con Peter Pan siendo a√∫n un ni√±o hu√©rfano en las calles de Londres, con nada menos que Jimmy Hook como mentor, antes de que este se convirtiera en Garfio. Charlie Rowe se encarga de dar vida a Peter Pan, y nada menos que Rhys Ifans es Hook. Les acompa√±an un reparto bastante interesante compuesto por Anna Friel (como una pirata), Keira Knightley (la voz de Campanilla), Charles Dance (Doctor Fludd), Bob Hoskins y Raoul Trujillo, entre otros muchos.</body></html>");
        Neverland.icono("/iconos/Neverland.jpg");
        
        this.setVisible(false);
        Neverland.setVisible(true);
    }//GEN-LAST:event_jLabel35MouseClicked

    private void jLabel36MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel36MouseClicked
        //Este es para Erase una Vez
        SerieFinal Erase = new SerieFinal();
        Erase.setSize(1160, 570);
        Erase.setResizable(false);
        Erase.setDefaultCloseOperation(Erase.DO_NOTHING_ON_CLOSE);
        
        Erase.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        Erase.setLocationRelativeTo(null);
        
        Erase.nombreSerie("√ârase una vez");
        Erase.setTitle("√ârase una vez");
        Erase.directorSerie("<html><body>Directores: Dean White, Ralph Hemecker, David Solomon, Milan Cheylov, Paul A. Edwards, David Barrett, Ron Underwood</body></html>");
        Erase.valoracion("Nota: 8.4 - Notable");
        Erase.sinopsis("<html><body>En una tierra de magia, princesas, hadas y Brujas, una reina malvada coloca un hechizo que congela el tiempo y transportes todos los habitantes del mundo de cuento de hadas en Storybrooke, una ciudad en los E.e.u.u. de hoy en d√≠a. No pueden recordar nada de sus vidas pasadas y la reina malvada, ahora conocida como Regina est√° ejecutando la ciudad y sus habitantes como el alcalde. La √∫nica persona que conoce que la verdad es de Regina adoptado a hijo Henry debido a su libro de cuentos de hadas. Con el fin de hacer las cosas derecho Henry logra localizar a su madre Emma que vive en Boston y convence a su estancia con √©l en Storybrooke. Para Emma es en realidad la hija de Blanca Nieves y el pr√≠ncipe azul y es el √∫nico que puede romper el hechizo. Ahora como las historias de cuento de hadas comienzan a desplegar en el mundo real y Emma lentamente comienza a creer afirmaciones de Henry, las tensiones entre Regina y Emma aumentan. Esta rivalidad se convierte y Emma se vuelve decidida a dejar de Regina as√≠ como para construir en su incipiente relaci√≥n con su madre (quien ahora es profesor de la escuela de coraz√≥n bueno de Henry) y el hijo que abandona hace diez a√±os.</body></html>");
        Erase.icono("/iconos/OnceUponATIme.jpg");
        
        this.setVisible(false);
        Erase.setVisible(true);
    }//GEN-LAST:event_jLabel36MouseClicked

    private void jLabel37MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel37MouseClicked
        //Este es para SmallVille
        SerieFinal Smallville = new SerieFinal();
        Smallville.setSize(1160, 570);
        Smallville.setResizable(false);
        Smallville.setDefaultCloseOperation(Smallville.DO_NOTHING_ON_CLOSE);
        
        Smallville.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        Smallville.setLocationRelativeTo(null);
        
        Smallville.nombreSerie("Smallville");
        Smallville.setTitle("Smallville");
        Smallville.directorSerie("<html><body>Directores: James Marshall, Greg Beeman, Mike Rohl, Jeannot Szwarc, Terrence O'Hara, Glen Winter, Kevin Fair, Whitney Ransick, Mairzee Almas, Rick Rosenthal</body></html>");
        Smallville.valoracion("Nota: 8.5 - Notable");
        Smallville.sinopsis("<html><body>En octubre de 1989, una gran lluvia de meteoritos destruy√≥ la mayor parte de la ciudad de Smallville, Kansas. Este evento trajo a Jonathan y Martha Kent lo que siempre quisieron, un hijo al que llamaron Clark. En 2001, su hijo se est√° convirtiendo en un hombre. Tiene dos buenos amigos, Pete Ross y Chloe Sullivan y est√° enamorado de una de las chicas m√°s bonitas en la escuela, Lana Lang, sin dejar de mencionar una incipiente amistad con N√©mesis, el futuro Lex Luthor. Pero sus padres le han estado ocultando un secreto: lo encontraron en una nave espacial, cuando vino en la lluvia de meteoros. √âl comienza a desarrollar sus poderes y descubrir m√°s habilidades que pronto le convertir√°n en Superman, Clark empieza a asumir su manto como el hombre de acero.</body></html>");
        Smallville.icono("/iconos/SmallVille.jpg");
        
        this.setVisible(false);
        Smallville.setVisible(true);
    }//GEN-LAST:event_jLabel37MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        //Esto abre el panel de buscar
        Buscar buscador = new Buscar();
        buscador.setSize(511, 107);
        buscador.setTitle("Buscar");
        buscador.setResizable(false);
        buscador.setDefaultCloseOperation(buscador.HIDE_ON_CLOSE);
        buscador.setLocationRelativeTo(null);
        buscador.setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        jLabel1.setForeground(Color.white);
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        jLabel1.setForeground(Color.black);
    }//GEN-LAST:event_jLabel1MouseExited

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseEntered
        jLabel2.setForeground(Color.white);
    }//GEN-LAST:event_jLabel2MouseEntered

    private void jLabel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseExited
        jLabel2.setForeground(Color.black);
    }//GEN-LAST:event_jLabel2MouseExited

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        //ESTE LLEVA A PELICULAS
        Peliculas ventana = new Peliculas();
        ventana.setSize(1160, 570);
        ventana.setResizable(false);
        ventana.setTitle("Peliculas");
        ventana.setDefaultCloseOperation(ventana.DO_NOTHING_ON_CLOSE);
        
        ventana.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        ventana.setLocationRelativeTo(null);
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        jLabel4.setForeground(Color.white);
    }//GEN-LAST:event_jLabel4MouseEntered

    private void jLabel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseExited
        jLabel4.setForeground(Color.black);
    }//GEN-LAST:event_jLabel4MouseExited

    private void jLabel38MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel38MouseClicked
        Novedades ventana = new Novedades();
        ventana.setSize(1160, 570);
        ventana.setResizable(false);
        ventana.setTitle("Novedades");
        ventana.setDefaultCloseOperation(ventana.DO_NOTHING_ON_CLOSE);
        
        ventana.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e)
            {
                String mensaje, titulo;
                mensaje = "¬øQuieres salir?";
                titulo = "Salir";
                Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));
                int reply = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.YES_NO_OPTION, 1, UCO);
                if(reply == JOptionPane.YES_NO_OPTION)
                {
                    System.exit(reply);
                }
            }
        });
        ventana.setLocationRelativeTo(null);
        ventana.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel38MouseClicked

    private void jLabel38MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel38MouseEntered
        jLabel38.setForeground(Color.white);
    }//GEN-LAST:event_jLabel38MouseEntered

    private void jLabel38MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel38MouseExited
        jLabel38.setForeground(Color.black);
    }//GEN-LAST:event_jLabel38MouseExited

    private void jLabel25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel25MouseClicked
        // Abrimos el panel de usuario
        Usuario usuario = new Usuario();
        usuario.setSize(500, 300);
        usuario.setDefaultCloseOperation(usuario.HIDE_ON_CLOSE);
        usuario.setLocationRelativeTo(null);
        usuario.setVisible(true);
    }//GEN-LAST:event_jLabel25MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        //Este es el menu de ayuda del principal
        JOptionPane panel = new JOptionPane();

        Icon UCO = new ImageIcon(getClass().getResource("/iconos/UCO.png"));

        panel.showMessageDialog(panel, "<html><body>Este es el menu de series\n"
            + "Puedes elegir entre series pulsando en su icono\n"
            , "Ayuda", WIDTH, UCO);
    }//GEN-LAST:event_jLabel20MouseClicked

    public String nombreBoton(JButton boton)
    {
        return boton.getName();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Series.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Series.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Series.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Series.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
